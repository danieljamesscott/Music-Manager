<?xml version="1.0" encoding="UTF-8"?>
<project name="com_music" default="build" basedir=".">
  <description>Ant Build File for com_music</description>

  <!-- load variables from config file -->
<!--   <property name="cfg.configFile" location="antconfig.txt" /> -->
<!--   <loadproperties srcfile="${cfg.configFile}" /> -->

  <!--config file values
      cfg.name=paket
      cfg.versionDir=v1_50
      cfg.buildDir=packages
      cfg.localhostRoot=../../www
      cfg.xmlfile=files.txt
	
      ftp.server=
      ftp.user=
      ftp.password=
      ftp.dir= 	
    -->

  <!-- auto values but should be checked -->
<!--   <property name="cfg.comName" value="com_${cfg.name}" /> -->
<!--   <property name="cfg.comDir" value="${basedir}/${cfg.versionDir}/${cfg.comName}" /> -->
<!--   <property name="cfg.buildVersionDir" value="${cfg.buildDir}/${cfg.versionDir}" /> -->
<!--   <property name="cfg.adminFilesDir" location="${cfg.comDir}/admin" /> -->
<!--   <property name="cfg.siteFilesDir" location="${cfg.comDir}/site" /> -->
<!--   <property name="cfg.extensionsDir" location="${cfg.adminFilesDir}/extensions" /> -->

  <target name="build" depends="clean, init, checkphp, build_component, info" />

  <target name="init" description="creates necessary directories to build with">
<!--     <mkdir dir="${cfg.buildVersionDir}" /> -->
<!--     <mkdir dir="${cfg.buildVersionDir}/plugins" /> -->
<!--     <mkdir dir="${cfg.buildVersionDir}/modules" /> -->
<!--     <mkdir dir="${cfg.buildVersionDir}/components" /> -->
<!--     <mkdir dir="${cfg.extensionsDir}" /> -->
  </target>

  <target name="build_component" description="packages the final component file">
    <zip destfile="com_music.zip" basedir="." excludes="build.xml, antconfig.txt, com_music.zip .git/** .gitignore" />
  </target>

<!--   <target name="build_plugins" description="packages any plugins"> -->
<!--     <\!-\- add all plugin directories here -\-> -->
<!--     <zip destfile="${cfg.buildVersionDir}/plugins/plg_uncleocho.zip" basedir="${cfg.versionDir}/plg_uncleocho" /> -->
<!--   </target> -->

<!--   <target name="build_modules" description="packages any modules"> -->
<!--     <\!-\- add all module directories here -\-> -->
<!--     <zip destfile="${cfg.buildVersionDir}/modules/mod_uncleocho.zip" basedir="${cfg.versionDir}/mod_uncleocho" /> -->
<!--   </target> -->

<!--   <target name="build_debug" description="builds any debug plugins or code"> -->
<!--     <zip destfile="${cfg.buildVersionDir}/plugins/billets_plugin_toolbox.zip" basedir="${cfg.versionDir}/billets_plugin_toolbox" /> -->
<!--     <zip destfile="${cfg.buildVersionDir}/plugins/billets_plugin_debug.zip" basedir="${cfg.versionDir}/billets_plugin_debug" /> -->
<!--   </target> -->

<!--   <target name="update_extensions" depends="build_plugins, build_modules" description="copies fresh builds of plugins and extensions to the admin/extensions folder"> -->
<!--     <copy todir="${cfg.extensionsDir}" overwrite="true"> -->
<!--       <fileset dir="${cfg.buildVersionDir}/plugins" /> -->
<!--     </copy> -->
<!--     <copy todir="${cfg.extensionsDir}" overwrite="true"> -->
<!--       <fileset dir="${cfg.buildVersionDir}/modules" /> -->
<!--     </copy> -->
<!--   </target> -->

  <target name="info" description="prints information">
    <echo message="Project:			com_music" />
    <tstamp>
      <format property="buildtime" pattern="yyyy-MM-dd'T'HH:mm:ss" />
    </tstamp>
    <echo message="Buildtime:	${buildtime}" />
  </target>

  <target name="clean" description="Destroys all generated files and dirs.">
<!--     <delete dir="${cfg.buildVersionDir}" /> -->
<!--     <delete dir="packages" /> -->
<!--     <delete dir="${cfg.extensionsDir}" /> -->
    <delete file="${cfg.xmlfile}" />
    <delete file="com_music.zip" />
  </target>

<!--   <target name="update_localhost" depends="info" description="attemps to update files on localhost server with files from working directory"> -->
<!--     <copy todir="${cfg.localhostRoot}/administrator/components/${cfg.comName}" overwrite="true"> -->
<!--       <fileset dir="${cfg.adminFilesDir}" /> -->
<!--     </copy> -->
<!--     <copy todir="${cfg.localhostRoot}/components/${cfg.comName}" overwrite="true"> -->
<!--       <fileset dir="${cfg.siteFilesDir}" /> -->
<!--     </copy> -->
<!--   </target> -->

<!--   <target name="upload" description="attempts to upload build file to ftp server"> -->
<!--     <fileset id="ftp.upload.fileset" dir="${cfg.buildVersionDir}/components"> -->
<!--       <include name="*.zip" /> -->
<!--     </fileset> -->
    
<!--     <echo>FTP target is ${ftp.server}</echo> -->
<!--     <ftp server="${ftp.server}" userid="${ftp.user}" password="${ftp.password}" action="put" remotedir="${ftp.dir}"> -->
<!--       <fileset refid="ftp.upload.fileset" /> -->
<!--     </ftp> -->
<!--   </target> -->

  <target name="build_xml" description="builds an xml listing of all the files in the working copy">
    <fileset id="site" dir="${cfg.siteFilesDir}" />
    <echo message="${line.separator}&lt;files folder=&quot;site&quot;&gt;${line.separator}&lt;filename&gt;" file="${cfg.xmlfile}" append="false" />
    <echo-fileset filesetref="site" />
    <echo message="&lt;/filename&gt;${line.separator}&lt;/files&gt;${line.separator}" file="${cfg.xmlfile}" append="true" />
    
    <fileset id="admin" dir="${cfg.adminFilesDir}" />
    <echo message="${line.separator}&lt;files folder=&quot;admin&quot;&gt;${line.separator}&lt;filename&gt;" file="${cfg.xmlfile}" append="true" />
    <echo-fileset filesetref="admin" />
    <echo message="&lt;/filename&gt;${line.separator}&lt;/files&gt;${line.separator}" file="${cfg.xmlfile}" append="true" />
    
    <replace file="${cfg.xmlfile}" token="${cfg.siteFilesDir}/" value="" />
    <replace file="${cfg.xmlfile}" token="${cfg.adminFilesDir}/" value="" />
  </target>

  <target name="checkphp">
    <apply executable="php" failonerror="true">
      <arg value="-l" />
      <fileset dir=".">
        <include name="**/*.php" />
      </fileset>
    </apply>
  </target>

  <macrodef name="echo-fileset" description="creates a printable directory listing">
    <attribute name="filesetref" />
    <sequential>
      <pathconvert pathsep="&lt;/filename&gt;${line.separator}&lt;filename&gt;" property="@{filesetref}.echopath">
	<path>
	  <fileset refid="@{filesetref}" />
	</path>
      </pathconvert>
      <echo message="${@{filesetref}.echopath}" file="${cfg.xmlfile}" append="true" />
    </sequential>
  </macrodef>
</project>
